import * as web3 from "@solana/web3.js";
import * as _client from "@hawksightco/swagger-client";
import { MeteoraCompound, MeteoraLimitCloseAutomation, MeteoraRebalance, MeteoraRebalance2, ResponseWithStatus, TransactionMetadata, TransactionMetadataResponse, TransactionPriority } from "../types";
import { Client } from "./Client";
import { createTxMetadata, resultOrError } from "../functions";
import { GeneralUtility } from "./GeneralUtility";
import { Anchor } from "../anchor";
import { txgen } from "./Transactions";

/**
 * The `TxGeneratorAutomations` class encapsulates methods to generate transactions with various trading operations
 * on decentralized market making platforms like Meteora and Orca within the Solana ecosystem. It allows
 * setting custom transaction priority and fees to manage transaction processing speed and cost.
 *
 * NOTE: For hawksight devs only.
 */
export class TxGeneratorAutomations {

  /**
   * The current priority level of transactions generated by this instance.
   */
  protected priorityLevel: _client.PriorityLevel;

  /**
   * The maximum priority fee in lamports that can be added to transactions for faster processing.
   */
  protected maxPriorityFee: number;

  /**
   * Initializes a new instance of the TxGenerator class with a specified client.
   *
   * @param client An instance of Client used to interact with various APIs for transaction generation.
   */
  constructor(
    private readonly client: Client,
    private readonly generalUtility: GeneralUtility,
  ) {
    this.priorityLevel = _client.PriorityLevel.Default;
    this.maxPriorityFee = 500_000; // Default max priority fee in lamports
  }

  /**
   * Creates meteora auto-compound instruction (claim fee, reward, and deposit to position)
   *
   * NOTE: For hawksight devs only.
   *
   * @param connection The Solana web3 connection object for blockchain interactions.
   * @param payer The public key of the payer for transaction fees.
   * @param params Parameters required
   * @returns A ResponseWithStatus containing either TransactionMetadataResponse or TransactionMetadata.
   */
  async meteoraCompoundIxs(connection: web3.Connection, payer: string, params: MeteoraCompound): Promise<ResponseWithStatus<TransactionMetadata>> {
    // Initialize anchor
    Anchor.initialize(connection);
    try {
      const result = await txgen.compoundAutomationIx({
        connection,
        params,
      });
      return {
        status: 200,
        data: await createTxMetadata(
          this.generalUtility,
          connection,
          payer,
          result
        ),
      };
    } catch (e) {
      return {
        status: 400,
        data: {
          code: "custom",
          message: e,
          path: [],
        } as any,
      };
    }
  }

  /**
   * Creates meteora auto-claim instruction (claim fee, reward)
   *
   * NOTE: For hawksight devs only.
   *
   * @param connection The Solana web3 connection object for blockchain interactions.
   * @param payer The public key of the payer for transaction fees.
   * @param params Parameters required
   * @returns A ResponseWithStatus containing either TransactionMetadataResponse or TransactionMetadata.
   */
  async meteoraClaimIxs(connection: web3.Connection, payer: string, params: MeteoraCompound): Promise<ResponseWithStatus<TransactionMetadata>> {
    // Initialize anchor
    Anchor.initialize(connection);
    try {
      const result = await txgen.claimAutomationIx({
        connection,
        params,
      });
      return {
        status: 200,
        data: await createTxMetadata(
          this.generalUtility,
          connection,
          payer,
          result
        ),
      };
    } catch (e) {
      return {
        status: 400,
        data: {
          code: "custom",
          message: e,
          path: [],
        } as any,
      };
    }
  }

  /**
   * Creates meteora auto-rebalance instruction
   *
   * NOTE: For hawksight devs only.
   *
   * @param connection The Solana web3 connection object for blockchain interactions.
   * @param payer The public key of the payer for transaction fees.
   * @param params Parameters required
   * @returns A ResponseWithStatus containing either TransactionMetadataResponse or TransactionMetadata.
   */
  async meteoraRebalanceIxs(connection: web3.Connection, payer: string, params: MeteoraRebalance): Promise<ResponseWithStatus<TransactionMetadata>> {
    // Initialize anchor
    Anchor.initialize(connection);
    try {
      const result = await txgen.rebalanceAutomationIx({
        connection,
        params,
      });
      return {
        status: 200,
        data: await createTxMetadata(
          this.generalUtility,
          connection,
          payer,
          result
        ),
      };
    } catch (e) {
      return {
        status: 400,
        data: {
          code: "custom",
          message: e,
          path: [],
        } as any,
      };
    }
  }

  /**
   * Creates meteora auto-rebalance instruction (uses new re-deposit instruction)
   *
   * NOTE: For hawksight devs only.
   *
   * @param connection The Solana web3 connection object for blockchain interactions.
   * @param payer The public key of the payer for transaction fees.
   * @param params Parameters required
   * @returns A ResponseWithStatus containing either TransactionMetadataResponse or TransactionMetadata.
   */
  async meteoraRebalanceIxs2(connection: web3.Connection, payer: string, params: MeteoraRebalance2): Promise<ResponseWithStatus<TransactionMetadata>> {
    // Initialize anchor
    Anchor.initialize(connection);
    try {
      const result = await txgen.rebalanceAutomationIx2({
        connection,
        params,
      });
      return {
        status: 200,
        data: await createTxMetadata(
          this.generalUtility,
          connection,
          payer,
          result
        ),
      };
    } catch (e) {
      return {
        status: 400,
        data: {
          code: "custom",
          message: e,
          path: [],
        } as any,
      };
    }
  }

  /**
   * Creates meteora close limit instruction (combination of claim fees/rewards + remove liquidity + close position)
   *
   * NOTE: For hawksight devs only.
   *
   * @param connection The Solana web3 connection object for blockchain interactions.
   * @param payer The public key of the payer for transaction fees.
   * @param params Parameters required
   * @returns A ResponseWithStatus containing either TransactionMetadataResponse or TransactionMetadata.
   */
  async meteoraLimitCloseIxs(connection: web3.Connection, payer: string, params: MeteoraLimitCloseAutomation): Promise<ResponseWithStatus<TransactionMetadata>> {
    // Initialize anchor
    Anchor.initialize(connection);
    try {
      const result = await txgen.limitCloseAutomationIx({
        connection,
        params,
      });
      return {
        status: 200,
        data: await createTxMetadata(
          this.generalUtility,
          connection,
          payer,
          result
        ),
      };
    } catch (e) {
      return {
        status: 400,
        data: {
          code: "custom",
          message: e,
          path: [],
        } as any,
      };
    }
  }
}
